########
# Copyright (c) 2017 MSO4SC - javier.carnero@atos.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

tosca_definitions_version: cloudify_dsl_1_3

imports:
    # to speed things up, it is possible to download this file,
    - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/18.1.11/resources/rest-service/cloudify/types/types.yaml
    # HPC pluging
    - http://raw.githubusercontent.com/MSO4SC/cloudify-hpc-plugin/master/plugin.yaml

inputs:
    # Monitor
    monitor_entrypoint:
        description: Monitor entrypoint IP
        default: ""
        type: string

    # Job prefix name
    job_prefix:
        description: Job name prefix in HPCs
        default: "mso_"
        type: string

    # First HPC configuration
    mso4sc_hpc_primary:
        description: Configuration for the primary HPC to be used
        default: {}
    
    # Second HPC configuration
    mso4sc_hpc_secondary:
        description: Configuration for the secondary HPC to be used
        default: {}

    parallel_tasks:
        description: number of tasks/processes to run in parallel
        default: "'32'"

    parallel_nodes:
        description: number of nodes on which to run
        default: "'2'"

    parallel_tasks_per_node:
        description: number of tasks/processes to run in parallel
        default: "'16'"

    max_time:
        description: maximum allowed time for run (minutes and seconds)
        default: '00:30:00'
        
    mso4sc_dataset_input_url:
        description: url to retrieve for case file
        default: "NONE"

    base_dir:
        description: Working directory
        default: "$LUSTRE"
   
    workdir_pref:
        description: directory prefix
        default: "wing"

    singularity_image_uri:
        description: URI pointing to the singularity image
        default: "shub://sregistry.srv.cesga.es/mso4sc/fenics-unicorn:latest"

    singularity_image_filename:
        description: Filename of the singularity image
        default: "mso4sc-fenics-unicorn-latest.simg"

    hpc_partition:
        description: Computing partition to use on the HPC system chosen
        default: "thinnodes"

    hpc_reservation:
        description: Computing reservation to use on the HPC system chosen
        default: "MSO4SC"

    app_T:
        description: final time for the simulation
        default: "'0.4'"

    app_alpha:
        description: angle of attack
        default: "'0.0'"

    app_cfl_target:
        description: cfl number for decision of the timestep
        default: "'20.0'"

    app_trip_factor:
        description: trip parameter
        default: "'0.0'"


    app_adaptive_iterations:
        description: number of adaptive refinements
        default: "'3'"

node_templates:
    main_hpc_node:
        type: hpc.nodes.Compute
        properties:
            config: { get_input: mso4sc_hpc_primary }
            external_monitor_entrypoint: { get_input: monitor_entrypoint }
            base_dir: { get_input: base_dir }
            workdir_prefix: { get_input: workdir_pref }
            job_prefix: { get_input: job_prefix }
            skip_cleanup: True
#            simulate: True  # COMMENT to test against a real HPC

    wing_compile:
        type: hpc.nodes.singularity_job
        properties:
            job_options:
                modules:
                    - gcc/5.3.0
                    - openmpi/1.10.2
                    - singularity/2.4.2
                partition: { get_input: hpc_partition }
                reservation: { get_input: hpc_reservation }
                image: { concat: [ '$CURRENT_WORKDIR/', { get_input: singularity_image_filename } ] }
                volumes:
                    - '/scratch '
                    - '/mnt -B $PWD/unicorn:/home  --pwd /home/wing_sim01'
                command: 'make UNICORNLIBDIR=/home > make_log 2>make_err'
                nodes: 1
                tasks: 1
                tasks_per_node: 1
                max_time: { get_input: max_time }
            deployment:
                bootstrap: 'scripts/singularity_bootstrap.sh'
                revert: 'scripts/singularity_revert.sh'
                inputs:
                    - { get_input: mso4sc_dataset_input_url }
                    - { get_input: singularity_image_uri }
                    - { get_input: singularity_image_filename }
                    - { get_input: app_T }
                    - { get_input: app_alpha }
                    - { get_input: app_cfl_target }
                    - { get_input: app_trip_factor }
        relationships:
            - type: job_contained_in_hpc
              target: main_hpc_node

    wing_run:
        type: hpc.nodes.job
        properties:
            job_options:
                modules:
                    - gcc/5.3.0
                    - openmpi/1.10.2
                    - singularity/2.4.2
                command: 'touch.script'
                type: 'SBATCH'
            deployment:
                bootstrap: 'scripts/sbatch_bootstrap.sh'
                revert: 'scripts/sbatch_revert.sh'
                inputs:
                    - { get_input: mso4sc_dataset_input_url }
                    - { get_input: singularity_image_uri }
                    - { get_input: singularity_image_filename }
                    - { get_input: parallel_tasks }
                    - { get_input: parallel_nodes }
                    - { get_input: parallel_tasks_per_node }
                    - { get_input: max_time }
                    - { get_input: app_adaptive_iterations }
                    - { get_input: hpc_reservation }
                    - { get_input: hpc_partition }
        relationships:
            - type: job_contained_in_hpc
              target: main_hpc_node
            - type: job_depends_on
              target: wing_compile


outputs:
    compile_job_name:
        description: compile job name in the HPC
        value: { get_attribute: [wing_compile, job_name] }
    run_job_name:
        description: run job name in the HPC
        value: { get_attribute: [wing_run, job_name] }
